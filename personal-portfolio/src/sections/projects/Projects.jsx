import "./projects.css";

import Project from "./Project";

import struggling_bums_site from "assets/images/struggling-bums-site.gif";
import genemesh from "assets/images/genemesh.gif";
import rotating_mesh from "assets/misc/rotating-mesh.gif";

export default function Projects() {
  return (
    <section id="projects" className="col">
      <h2>Portfolio</h2>
      <Project
        id="01"
        title="Struggling With The Bums Podcast Site"
        description={{
          introduction:
            "The Struggling With The Bums Podcast is a show that focuses on the struggles of everyday people. The purpose of this project is to create a website for the Struggling With The Bums Podcast that provides a platform for the hosts to upload and manage podcast episodes and blog posts. The website also includes a feature-rich user portal that allows the hosts to make changes to the site and view site analytics. Additionally, the website includes a custom-made audio scroller that enhances the user experience.",
          features: [
            "CRUD Functionality: The website provides CRUD functionality that allows the hosts to create, read, update, and delete podcast episodes and blog posts.",
            `User Portal: The user portal provides a platform for the hosts to manage the website's content. The portal includes features such as adding new episodes and blog posts, editing existing ones, and deleting old ones.`,
            `Site Analytics: The website tracks several aspects, including site visits, individual blog reads, episode listens, and link clicks to other sites hosting the podcast like Spotify. This feature allows the hosts to keep track of the website's performance and make data-driven decisions.`,
          ],
          architecture: `The website is built using React.js and uses the Redux library for state management. The backend is a Flask server that provides the necessary APIs for the frontend to interact with the database. The site is hosted on a Linux server and uses Nginx as a reverse proxy and Gunicorn as a WSGI server.`,
        }}
        image={struggling_bums_site}
        stack={{
          frontend: ["React.JS", "Redux", "HTML", "CSS"],
          backend: ["Flask", "SQLite", "JWT Auth"],
          testing: ["Jest", "React Testing Library"],
          deployment: ["Linux", "Ubuntu", "Nginx", "Gunicorn"],
        }}
        live="https://strugglingbums.com/"
        orientation="left"
      />
      <Project
        id="02"
        title="Genemesh: A Text To 3D Mesh Application"
        description={{
          introduction: `Genemesh is an application designed to simplify the interaction between users and OpenAI's POINT-E model. The application provides a user-friendly interface for generating and displaying meshes generated by the model. The application includes a settings panel that allows users to adjust the generation settings to their preference. Once generated, a unique ID is assigned to each mesh, which can be used to retrieve and display it on the frontend.`,
          features: [
            `Settings Panel: The application includes a settings panel that allows users to adjust the generation settings to their desired specifications.`,
            `Text Input Submission: Users can submit text input to the backend, which is then fed to the POINT-E model to generate the mesh.`,
            `Unique Mesh ID: After generation, each mesh is assigned a unique ID that corresponds to the mesh. The ID is sent to the frontend, allowing the application to request the specific mesh from storage and display it. These IDâ€™s are also stored in application memory so users can go back and load previous generated models in the history tab.`,
            `Mesh Display and Interaction: The application uses the Three.JS library to display and interact with the generated mesh. Users can rotate and zoom in/out of the mesh to view it from different angles.`,
          ],
          architecture: `The Genemesh application is built using React.js and uses the Three.JS library for mesh display and interaction. The backend is built using Python and Flask, which communicates with OpenAI's POINT-E model to generate the mesh.`,
        }}
        image={genemesh}
        video={rotating_mesh}
        stack={{
          frontend: ["React.JS", "Redux", "Three.JS", "CSS"],
          backend: ["Flask", "MySQL"],
          testing: ["Jest", "React Testing Library"],
        }}
        github="https://github.com/DJMendoza3/GeneMesh"
        orientation="right"
      />
    </section>
  );
}
